{"version":3,"file":"static/js/548.6859c1a0.chunk.js","mappings":"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","sources":["components/ContentBlock/index.tsx","components/ContentBlock/styles.ts"],"sourcesContent":["import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\nimport \"./styles.css\"; // Import styles.css\r\nimport { navigateToDashboard } from \"../../common/utils/helper\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  imageSrc, // Add imageSrc to props\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            {imageSrc ? (\r\n              <img\r\n                className=\"cloudy-border\"\r\n                src={imageSrc}\r\n                alt={title}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n              /> // Conditionally render image\r\n            ) : (\r\n              <SvgIcon src={icon ?? \"\"} width=\"100%\" height=\"100%\" /> // Default to SvgIcon if imageSrc is not provided\r\n            )}\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              {button && (\r\n                <ButtonWrapper>\r\n                  {typeof button === \"object\" &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                          toDashboard?: boolean;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={\r\n                              item.toDashboard\r\n                                ? navigateToDashboard\r\n                                : () => scrollTo(\"about\")\r\n                            }\r\n                          >\r\n                            {t(item.title)}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n              )}\r\n              {section && (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {typeof section === \"object\" &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string;\r\n                            icon?: string;\r\n                            imageSrc?: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              {item.imageSrc ? (\r\n                                <img\r\n                                  src={item.imageSrc}\r\n                                  alt={item.title}\r\n                                  width=\"100px\"\r\n                                  height=\"100px\"\r\n                                />\r\n                              ) : (\r\n                                <SvgIcon\r\n                                  src={item.icon ?? \"\"}\r\n                                  width=\"100px\"\r\n                                  height=\"100px\"\r\n                                />\r\n                              )}\r\n\r\n                              <MinTitle>{t(item.title)}</MinTitle>\r\n                              <MinPara>{t(item.content)}</MinPara>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 0rem 0 15rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n"],"names":["withTranslation","_ref","icon","imageSrc","title","content","section","button","t","id","direction","_jsx","ContentSection","children","Fade","triggerOnce","_jsxs","StyledRow","justify","align","Col","lg","md","sm","xs","className","src","alt","width","height","SvgIcon","ContentWrapper","Content","ButtonWrapper","map","item","Button","color","onClick","toDashboard","navigateToDashboard","document","getElementById","scrollIntoView","behavior","scrollTo","ServiceWrapper","Row","_item$icon","span","MinTitle","MinPara","styled"],"sourceRoot":""}